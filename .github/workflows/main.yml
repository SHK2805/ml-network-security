name: Build and Push Docker Image to ECR

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.editorconfig'
      - '.gitattributes'
      - '.gitignore'
      - 'CHANGELOG.md'
      - 'LICENSE'
      - 'LICENSE.txt'
      - '**/*.md'
      - '**/*.png'
      - '**/*.jpg'
      - '**/*.jpeg'
      - '**/*.gif'
      - '**/*.svg'
      - '.env'

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        id: checkout

      - name: Run unit tests
        id: unit-tests
        run: |
          echo "Running unit tests"
          echo "Unit tests passed"

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.push.outputs.image }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        id: checkout

      - name: Install utilities
        id: install-utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Configure AWS credentials
        id: configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image to Amazon ECR
        id: push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  build-and-push-ecr-image-to-ec2:
    name: Continuous Deployment to EC2
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        id: checkout

      - name: Install utilities
        id: install-utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Configure AWS credentials
        id: configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy Docker image to EC2 from ECR
        id: deploy-image
        # docker pull ${{ needs.build-and-push-ecr-image.outputs.image }}
        run: |
          echo "Pulling Docker image from Amazon ECR"
          docker pull ${{ secrets.AWS_ECR_LOGIN_URI }}/${{secrets.AWS_ECR_REPOSITORY_NAME}}:${{ github.sha }}
          echo "Docker image pulled from Amazon ECR"

      - name: Stop and remove container if running
        id: stop-container
        run: |
          echo "Stopping and removing Docker container if running"
          docker stop networksecurity || true
          docker rm networksecurity || true
          echo "Docker container stopped and removed"
        

      - name: Run Docker container on EC2
        id: run-container
        run: |
          echo "Running Docker container on EC2"
          docker run -d -p 8000:8000 --ipc="host" --name=networksecurity -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' -e 'AWS_REGION=${{ secrets.AWS_REGION }}' ${{ secrets.AWS_ECR_LOGIN_URI }}/${{secrets.AWS_ECR_REPOSITORY_NAME}}:${{ github.sha }}
          echo "Docker container running on EC2"

      - name: Check Docker container status
        id: check-status
        run: |
          echo "Checking Docker container status"
          docker ps
          echo "Docker container status checked"

      - name: Prune Docker images
        id: prune-images
        run: |
          echo "Pruning Docker images"
          docker image prune -f
          echo "Docker images pruned"
